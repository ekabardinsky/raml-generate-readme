import hl = require("./parser/highLevelAST");
import ll = require("./parser/lowLevelAST");
export declare function createStubNode(t: hl.ITypeDefinition, p: hl.IProperty, key?: string, unit?: ll.ICompilationUnit): hl.IHighLevelNode;
export declare function createStub(parent: hl.IHighLevelNode, property: string, key?: string): hl.IHighLevelNode;
export declare function createStubNoParentPatch(parent: hl.IHighLevelNode, property: string, key?: string): hl.IHighLevelNode;
export declare function createResourceStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createMethodStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createResponseStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createBodyStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createUriParameterStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createQueryParameterStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export declare function createASTPropImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty, fk?: boolean): hl.IAttribute;
export declare function createASTNodeImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IHighLevelNode;
export declare function createVirtualASTPropImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IAttribute;
export declare function createVirtualNodeImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IHighLevelNode;
export declare function createMapping(name: string, value: string): ll.ILowLevelASTNode;
export declare function createMap(): ll.ILowLevelASTNode;
export declare function createAttr(_property: hl.IProperty, val: any): hl.IAttribute;
